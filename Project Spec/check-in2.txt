LECTURE REFLECTION : RESTful Design
Joseph Malovic
October 16th, 2020

1. Identify various types of resources you think your Stock project needs?

            --- JSON stock object           ---

            Stock contains:   symbol (ticker),
                              name,
                              price,
                              buy/sell,
                              event subscribers,
                              key market data


            --- JSON user object (accounts) ---

            User contains:    name,
                              uniqueID,
                              watchlist,
                              owned stocks,
                              orders,
                              cash,
                              overall account growth


2. What types of operations (create, update, delete, read) will be necessary for each type of resource?

          Operations:         deposit
                                - purpose: handles a user depositing money to their account
                                - in: amount, user
                                - out: boolean

                              withdraw
                                - purpose: allows user to withdraw cash from their account
                                - in: amount, user
                                - out: boolean (false if not enough funds)

                              place order
                                - purpose: allows a user to make a market buy
                                - in: quantity, limit price, stock, user
                                - out: order ID, int

                              cancel order
                                - purpose: cancels an order before the market buy
                                - in: order ID
                                - out: boolean

                              add to watchlist
                                - purpose: allows a user to add a ticker to their watchlist
                                - in: user, watchlist, stock symbol
                                - out: boolean

                              remove from watchlist
                                - purpose: allows a user to remove a ticker from their watchlist
                                - in: user, watchlist, stock symbol
                                - out: boolean

                              check stock ownership
                                - purpose: checks if a user owns a specific stock
                                - in: user, stock
                                - out: quantity of ownership, int (returns 0, if none)

                              update news data
                                - purpose: updates the news info, gets from API
                                - in: none
                                - out: none

                              update market data
                                - purpose: updates all stock info, users view, calls at an interval
                                - in: none
                                - out: boolean

                              register for event subscription
                                - purpose: allows a user to subscribe to a particular event or stock
                                - in: user, event / stock
                                - out: boolean

                              login
                                - purpose: allows a user to login, checking credentials
                                - in: user ID, password
                                - out: boolean (success/failure)

                              logout
                                - purpose: allows user to securely log out of their account
                                - in: none
                                - out: boolean

3. Outline the design for a RESTful API that you could use to facilitate the operations you defined above.
This should include what routes/URLs your system may have, what HTTP methods will be applicable for each route,
as well as what the request and response data may contain.

            Page Templates:

                              Static resources:
                                      │   │
                                      │   ├───css
                                      │   │       account.css
                                      │   │       dashboard.css
                                      │   │       header.css
                                      │   │       market.css
                                      │   │       sidenav.css
                                      │   │       styles.css
                                      │   │       trading.css
                                      │   │       trading.css.map
                                      │   │       trading.scss
                                      │   │
                                      │   ├───html
                                      │   │       account.html
                                      │   │       dashboard.html
                                      │   │       market.html
                                      │   │       trading.html
                                      │   │
                                      │   └───js
                                      │           login.js
                                      │           myChart.js
                                      │           news.js
                                      |           modal.js
                                      \____________________________

            Routes:

                            GET /resource
                              - gets the resources for styling and all other static resources

                            GET /stock
                              - gets the specific stock data from the server
                              - request JSON
                              - response is JSON with stock data

                            GET /user
                              - gets the user's data upon login
                              - response is JSON with all relevant user data

                            GET /news
                              - gets the news from the server
                              - response JSON

                            GET /user-balance
                              - gets the updated user balance
                              - response is the updated JSON user object

                            GET /user-watchlist
                              - response is updated watchlist of user
                              - called when user removes or adds to a watchlist

                            POST /purchase
                              - response includes user object with updated data (stock holdings, balance)

                            POST /user-balance
                              - request includes user balance and ID
                              - differs in response depending on withdraw or deposit
                              - response is the updated balance of the user

                            POST /user-watchlist
                              - response is updated watchlist of user
                              - called when user removes or adds to a watchlist



Fuction:
    deposit money (amount, user) --> boolean
    withdraw money (amount, user) --> boolean

    place order(quantity, limit price, stock, user) --> boolean
        produces an orderID
    cancel order (orderID) --> boolean

    add/remove watchlust stocks (user/watchlist, stock) --> boolean
    add/remove watchlists (userID) --> boolean

    check if user owns a specific stock (user, stock) --> int (quantity)
        if yes, how many?

    updarte market data and refreshing the users view (whole market) --> boolean
        can use setInterval() to refresh every x secs

    matching orders(orderID, orderID2, user1, user2) --> boolean
    matchingOrder(stock)
        implies stock holds a list of all orders
        every time this stock is bought or sold, callthis function
    register for event subscription (user, stock, minPercentChange) --> boolean
    
Template Engine:
    body
        view of all stocks on the market

        would you want to view all pending oders? public/private info?
            view only specified stock orders

subscription
        